{"ast":null,"code":"import _asyncToGenerator from \"/Users/omrikellner/WebstormProjects/epicure-admin-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RestaurantsService {\n  constructor(http) {\n    var _this = this;\n\n    this.http = http;\n    this.restaurants = []; // getAllRestaurants() {\n    //   this.restaurants=[]\n    //   return this.http.get('http://localhost:9000/api/v1/restaurants').pipe(\n    //     map((responseData: Restaurant) => {\n    //       for (const key in responseData) {\n    //         this.restaurants.push(responseData[key]);\n    //       }\n    //       return this.restaurants;\n    //     })\n    //   );\n    // }\n\n    this.getAllRestaurants = /*#__PURE__*/_asyncToGenerator(function* () {\n      try {\n        const url = `http://localhost:9000/api/v1/restaurant`;\n        const response = yield fetch(url);\n        const responseJson = yield response.json();\n        _this.restaurants = responseJson;\n      } catch (err) {\n        console.log(err);\n      }\n    });\n  }\n\n  addRestaurant(obj) {\n    console.log(obj);\n    return this.http.post('http://localhost:4000/api/v1/restaurants/addRestaurant', obj);\n  }\n\n  updateRestaurant(id, obj) {\n    console.log(id, obj);\n    return this.http.put(`http://localhost:4000/api/v1/restaurants/updateRestaurant/${id}`, obj);\n  }\n\n  deleteRestaurant(id) {\n    console.log(id);\n    return this.http.delete(`http://localhost:4000/api/v1/restaurants/deleteRestaurant/${id}`);\n  }\n\n}\n\nRestaurantsService.ɵfac = function RestaurantsService_Factory(t) {\n  return new (t || RestaurantsService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nRestaurantsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RestaurantsService,\n  factory: RestaurantsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/omrikellner/WebstormProjects/epicure-admin-angular/src/app/services/restaurants.service.ts"],"names":["i0","i1","RestaurantsService","constructor","http","restaurants","getAllRestaurants","url","response","fetch","responseJson","json","err","console","log","addRestaurant","obj","post","updateRestaurant","id","put","deleteRestaurant","delete","ɵfac","RestaurantsService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,kBAAN,CAAyB;AAC5BC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAAA;;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,WAAL,GAAmB,EAAnB,CAFc,CAGd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAKC,iBAAL,kCAAyB,aAAY;AACjC,UAAI;AACA,cAAMC,GAAG,GAAI,yCAAb;AACA,cAAMC,QAAQ,SAASC,KAAK,CAACF,GAAD,CAA5B;AACA,cAAMG,YAAY,SAASF,QAAQ,CAACG,IAAT,EAA3B;AACA,QAAA,KAAI,CAACN,WAAL,GAAoBK,YAApB;AACH,OALD,CAMA,OAAOE,GAAP,EAAY;AACRC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;AACJ,KAVD;AAWH;;AACDG,EAAAA,aAAa,CAACC,GAAD,EAAM;AACfH,IAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACA,WAAO,KAAKZ,IAAL,CAAUa,IAAV,CAAe,wDAAf,EAAyED,GAAzE,CAAP;AACH;;AACDE,EAAAA,gBAAgB,CAACC,EAAD,EAAKH,GAAL,EAAU;AACtBH,IAAAA,OAAO,CAACC,GAAR,CAAYK,EAAZ,EAAgBH,GAAhB;AACA,WAAO,KAAKZ,IAAL,CAAUgB,GAAV,CAAe,6DAA4DD,EAAG,EAA9E,EAAiFH,GAAjF,CAAP;AACH;;AACDK,EAAAA,gBAAgB,CAACF,EAAD,EAAK;AACjBN,IAAAA,OAAO,CAACC,GAAR,CAAYK,EAAZ;AACA,WAAO,KAAKf,IAAL,CAAUkB,MAAV,CAAkB,6DAA4DH,EAAG,EAAjF,CAAP;AACH;;AAtC2B;;AAwChCjB,kBAAkB,CAACqB,IAAnB,GAA0B,SAASC,0BAAT,CAAoCC,CAApC,EAAuC;AAAE,SAAO,KAAKA,CAAC,IAAIvB,kBAAV,EAA8BF,EAAE,CAAC0B,QAAH,CAAYzB,EAAE,CAAC0B,UAAf,CAA9B,CAAP;AAAmE,CAAtI;;AACAzB,kBAAkB,CAAC0B,KAAnB,GAA2B,aAAc5B,EAAE,CAAC6B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE5B,kBAAT;AAA6B6B,EAAAA,OAAO,EAAE7B,kBAAkB,CAACqB,IAAzD;AAA+DS,EAAAA,UAAU,EAAE;AAA3E,CAAtB,CAAzC","sourcesContent":["import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RestaurantsService {\n    constructor(http) {\n        this.http = http;\n        this.restaurants = [];\n        // getAllRestaurants() {\n        //   this.restaurants=[]\n        //   return this.http.get('http://localhost:9000/api/v1/restaurants').pipe(\n        //     map((responseData: Restaurant) => {\n        //       for (const key in responseData) {\n        //         this.restaurants.push(responseData[key]);\n        //       }\n        //       return this.restaurants;\n        //     })\n        //   );\n        // }\n        this.getAllRestaurants = async () => {\n            try {\n                const url = `http://localhost:9000/api/v1/restaurant`;\n                const response = await fetch(url);\n                const responseJson = await response.json();\n                this.restaurants = (responseJson);\n            }\n            catch (err) {\n                console.log(err);\n            }\n        };\n    }\n    addRestaurant(obj) {\n        console.log(obj);\n        return this.http.post('http://localhost:4000/api/v1/restaurants/addRestaurant', obj);\n    }\n    updateRestaurant(id, obj) {\n        console.log(id, obj);\n        return this.http.put(`http://localhost:4000/api/v1/restaurants/updateRestaurant/${id}`, obj);\n    }\n    deleteRestaurant(id) {\n        console.log(id);\n        return this.http.delete(`http://localhost:4000/api/v1/restaurants/deleteRestaurant/${id}`);\n    }\n}\nRestaurantsService.ɵfac = function RestaurantsService_Factory(t) { return new (t || RestaurantsService)(i0.ɵɵinject(i1.HttpClient)); };\nRestaurantsService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RestaurantsService, factory: RestaurantsService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}