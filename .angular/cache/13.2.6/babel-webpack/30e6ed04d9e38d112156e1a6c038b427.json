{"ast":null,"code":"import _asyncToGenerator from \"/Users/omrikellner/WebstormProjects/epicure-admin-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ChefsService {\n  constructor(http) {\n    this.http = http;\n    this.chefs = [];\n  }\n\n  getAllChefs() {\n    this.chefs = [];\n    return this.http.get('http://localhost:9000/api/v1/chef').pipe(map(responseData => {\n      for (const key in responseData) {\n        this.chefs.push(responseData[key]);\n      }\n\n      return this.chefs;\n    }));\n  }\n\n  addChef(obj) {\n    console.log(obj);\n    return this.http.post('http://localhost:9000/api/v1/chef', obj);\n  }\n\n  updateChef(id, obj) {\n    console.log(id, obj);\n    return this.http.put(`http://localhost:9000/api/v1/chef/${id}`, obj);\n  }\n\n  deleteChef(id) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      console.log(id);\n      yield _this.http.delete(`http://localhost:9000/api/v1/chef/${id}`);\n    })();\n  }\n\n}\n\nChefsService.ɵfac = function ChefsService_Factory(t) {\n  return new (t || ChefsService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nChefsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChefsService,\n  factory: ChefsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/omrikellner/WebstormProjects/epicure-admin-angular/src/app/services/chefs.service.ts"],"names":["map","i0","i1","ChefsService","constructor","http","chefs","getAllChefs","get","pipe","responseData","key","push","addChef","obj","console","log","post","updateChef","id","put","deleteChef","delete","ɵfac","ChefsService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,YAAN,CAAmB;AACtBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAa,EAAb;AACH;;AACDC,EAAAA,WAAW,GAAG;AACV,SAAKD,KAAL,GAAa,EAAb;AACA,WAAO,KAAKD,IAAL,CAAUG,GAAV,CAAc,mCAAd,EACFC,IADE,CACGT,GAAG,CAAEU,YAAD,IAAkB;AAC5B,WAAK,MAAMC,GAAX,IAAkBD,YAAlB,EAAgC;AAC5B,aAAKJ,KAAL,CAAWM,IAAX,CAAgBF,YAAY,CAACC,GAAD,CAA5B;AACH;;AACD,aAAO,KAAKL,KAAZ;AACH,KALY,CADN,CAAP;AAOH;;AACDO,EAAAA,OAAO,CAACC,GAAD,EAAM;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,WAAO,KAAKT,IAAL,CAAUY,IAAV,CAAe,mCAAf,EAAoDH,GAApD,CAAP;AACH;;AACDI,EAAAA,UAAU,CAACC,EAAD,EAAKL,GAAL,EAAU;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYG,EAAZ,EAAgBL,GAAhB;AACA,WAAO,KAAKT,IAAL,CAAUe,GAAV,CAAe,qCAAoCD,EAAG,EAAtD,EAAyDL,GAAzD,CAAP;AACH;;AACKO,EAAAA,UAAU,CAACF,EAAD,EAAK;AAAA;;AAAA;AACjBJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,EAAZ;AACA,YAAM,KAAI,CAACd,IAAL,CAAUiB,MAAV,CAAkB,qCAAoCH,EAAG,EAAzD,CAAN;AAFiB;AAGpB;;AA1BqB;;AA4B1BhB,YAAY,CAACoB,IAAb,GAAoB,SAASC,oBAAT,CAA8BC,CAA9B,EAAiC;AAAE,SAAO,KAAKA,CAAC,IAAItB,YAAV,EAAwBF,EAAE,CAACyB,QAAH,CAAYxB,EAAE,CAACyB,UAAf,CAAxB,CAAP;AAA6D,CAApH;;AACAxB,YAAY,CAACyB,KAAb,GAAqB,aAAc3B,EAAE,CAAC4B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE3B,YAAT;AAAuB4B,EAAAA,OAAO,EAAE5B,YAAY,CAACoB,IAA7C;AAAmDS,EAAAA,UAAU,EAAE;AAA/D,CAAtB,CAAnC","sourcesContent":["import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ChefsService {\n    constructor(http) {\n        this.http = http;\n        this.chefs = [];\n    }\n    getAllChefs() {\n        this.chefs = [];\n        return this.http.get('http://localhost:9000/api/v1/chef')\n            .pipe(map((responseData) => {\n            for (const key in responseData) {\n                this.chefs.push(responseData[key]);\n            }\n            return this.chefs;\n        }));\n    }\n    addChef(obj) {\n        console.log(obj);\n        return this.http.post('http://localhost:9000/api/v1/chef', obj);\n    }\n    updateChef(id, obj) {\n        console.log(id, obj);\n        return this.http.put(`http://localhost:9000/api/v1/chef/${id}`, obj);\n    }\n    async deleteChef(id) {\n        console.log(id);\n        await this.http.delete(`http://localhost:9000/api/v1/chef/${id}`);\n    }\n}\nChefsService.ɵfac = function ChefsService_Factory(t) { return new (t || ChefsService)(i0.ɵɵinject(i1.HttpClient)); };\nChefsService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ChefsService, factory: ChefsService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}